from telegram import Update, ReplyKeyboardMarkup, Bot, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from fpdf import FPDF
import logging
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
CHOOSING_SPECIALIST, CHOOSING_DATE, CHOOSING_TIME = range(3)

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Ä–∞—á–µ–π
doctors = ["–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥", "–¢–µ—Ä–∞–ø–µ–≤—Ç", "–ü—Å–∏—Ö–∏–∞—Ç—Ä", "–≠–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥"]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PDF-—Ñ–∞–π–ª–∞
def create_pdf(doctor, date):
    pdf = FPDF()
    pdf.add_page()
    pdf.add_font('TimesNewRomanPSMT', '', 'E:\\–°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–±–æ—Ç–∞\\timesnewromanpsmt.ttf', uni=True)  # –î–æ–±–∞–≤–ª—è–µ–º —à—Ä–∏—Ñ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π UTF-8
    pdf.set_font("TimesNewRomanPSMT", size=12)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–æ—Ç —à—Ä–∏—Ñ—Ç
    
    pdf.cell(200, 10, txt="–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º", ln=True, align='C')
    pdf.cell(200, 10, txt=f"–í—Ä–∞—á: {doctor}", ln=True, align='L')
    pdf.cell(200, 10, txt=f"–î–∞—Ç–∞: {date}", ln=True, align='L')
    pdf.output("appointment_ticket.pdf")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤—Ä–∞—á–∞–º–∏
def create_doctor_keyboard():
    keyboard = [[KeyboardButton(doctor)] for doctor in doctors]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–∞—Ç–∞–º–∏
def create_date_keyboard():
    keyboard = [[KeyboardButton((datetime.now() + timedelta(days=i)).strftime("%Y-%m-%d"))] for i in range(7)]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –°—Ç–∞—Ä—Ç –¥–∏–∞–ª–æ–≥–∞ –∏ –Ω–∞—á–∞–ª–æ –≤—ã–±–æ—Ä–∞ –≤—Ä–∞—á–∞
async def handle_appointment_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:", reply_markup=create_doctor_keyboard())
    return CHOOSING_SPECIALIST

# –í—ã–±–æ—Ä –≤—Ä–∞—á–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
async def choose_specialist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['doctor'] = update.message.text
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–∏–µ–º–∞:", reply_markup=create_date_keyboard())
    return CHOOSING_DATE

# –í—ã–±–æ—Ä –¥–∞—Ç—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
async def choose_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['date'] = update.message.text
    create_pdf(context.user_data['doctor'], context.user_data['date'])
    await update.message.reply_text(f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –ø—Ä–∏–µ–º –∫ {context.user_data['doctor']} –Ω–∞ {context.user_data['date']}. –¢–∞–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ PDF —Ñ–æ—Ä–º–∞—Ç–µ.", reply_markup=create_keyboard())
    return ConversationHandler.END

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_keyboard():
    keyboard = [
        [KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º")],
        [KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=create_keyboard())

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main() -> None:
    bot_token = "7322321899:AAHA2t4_iqyhwSzT185KtvsB8NLKJ3x-oi4"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
    bot = Bot(token=bot_token)
    application = ApplicationBuilder().token(bot_token).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º'), handle_appointment_button)],
        states={
            CHOOSING_SPECIALIST: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_specialist)],
            CHOOSING_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_date)],
        },
        fallbacks=[],
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("start", start))

    application.run_polling()

if __name__ == '__main__':
    main()
